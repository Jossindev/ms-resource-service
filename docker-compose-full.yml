version: '3.7'

services:
  ms-storage-app:
    container_name: ms-storage-app
    image: ms-storage
    ports:
      - "8083:8083"
    networks:
      - microservices_network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/

  ms-song-app:
    container_name: ms-song-app
    image: ms-song
    ports:
      - "8082:8082"
    networks:
      - microservices_network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/

  ms-resource-processor-app:
    container_name: ms-resource-processor-app
    image: ms-resource-processor
    ports:
      - "8081:8081"
    environment:
      SPRING_RABBITMQ_HOST: rabbit
      SPRING_RABBITMQ_PORT: 5672
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    networks:
      - rabbit_network
      - microservices_network
    depends_on:
      - rabbit
      - ms-song-app

  ms-resource-app:
    container_name: ms-resource-app
    image: ms-resource
    restart: always
    ports:
      - "8080:8080"
    environment:
      SPRING_RABBITMQ_HOST: rabbit
      SPRING_RABBITMQ_PORT: 5672
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - rabbit
      - ms-resource-processor-app
      - ms-song-app
      - elasticsearch
    labels:
      collect_logs_with_filebeat: "true"
      decode_log_event_to_json_object: "true"
    networks:
      - rabbit_network
      - microservices_network
      - localstack_network

  eureka-server-app:
    container_name: eureka-server
    image: eureka-server
    restart: always
    ports:
      - "8761:8761"
    networks:
      - microservices_network

  api-gateway-app:
    container_name: api-gateway
    image: api-gateway
    restart: always
    ports:
      - "8090:8090"
    networks:
      - microservices_network
    depends_on:
      - eureka-server-app

  localstack:
    container_name: localstack
    image: localstack/localstack:latest
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=us-east-1
    ports:
      - '127.0.0.1:4566:4566'
    networks:
      - localstack_network
    volumes:
      - ${TEMPDIR:-/tmp/localstack}:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/localstack/init-s3-bucket.sh:/docker-entrypoint-initaws.d/init-s3-bucket.sh

  rabbit:
    container_name: rabbit
    image: rabbitmq:3.7-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - rabbit_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - "discovery.type=single-node"
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xmx512m -Xms512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - microservices_network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.2.0
    container_name: logstash
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "5044:5044"
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
    restart: on-failure
    depends_on:
      - elasticsearch
    networks:
      - microservices_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.2.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    restart: on-failure
    depends_on:
      - elasticsearch
    networks:
      - microservices_network

networks:
  rabbit_network:
    external: true
  microservices_network:
    external: true
  localstack_network:
    external: true

volumes:
  elasticsearch-data:
    driver: local
